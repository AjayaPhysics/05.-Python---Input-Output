# Chapter: Input and Output in Python

## Explanation

"""
Input and output operations are fundamental in programming. In Python, `input()` is used to take user input, and `print()` is used to display output.
"""

### 1. **`input()` Function**

"""
The `input()` function allows the user to enter data from the keyboard. By default, it returns the input as a string. If you need a specific data type, you can convert the input using type casting (e.g., `int()`, `float()`).

#### Syntax:
variable = input(prompt)

- **prompt**: A string displayed to the user before the input (optional).
- **variable**: Stores the input entered by the user.
"""

# Example 1: Taking User Input
name = input("What is your name? ")
print("Nice to meet you, " + name + "!")

# Example 2: Taking Integer Input
age = int(input("How old are you? "))
print("You are " + str(age) + " years old.")

# Example 3: Taking Float Input
height = float(input("What is your height in meters? "))
print("Your height is", height, "meters.")

### 2. **`print()` Function**

"""
The `print()` function displays output to the screen. It can accept multiple arguments separated by commas and automatically adds a space between them.

#### Syntax:
print(*objects, sep=' ', end='\n')

- **objects**: The values to print.
- **sep**: Separator between values (default is a space).
- **end**: String appended after the last value (default is a newline `\n`).
"""

# Example 4: Customizing `print()` Output
print("Python", "Input", "and", "Output", sep="-", end="\n\n")

# Example 5: Printing Multiple Lines
print("Line 1\nLine 2\nLine 3")

# Example 6: Using Formatted Strings
print(f"My name is {name} and I am {age} years old.")

### 3. **Combining `input()` and `print()`**

# Example 7: A Simple Program
current_year = 2024
birth_year = current_year - age
print(f"Hello, {name}! You were born in {birth_year}.")

"""
This script demonstrates the basic uses of `input()` for taking user input and `print()` for displaying output, along with examples of customization and formatting.
"""
